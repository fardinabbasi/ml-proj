# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nk9gcM1qYRed6CVmb6YHA0zlIYbPPNOu
"""

from pathlib import Path
import os
import json
import cv2
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image, ExifTags

# -------------------------------
# 1. Delete invalid files
# -------------------------------
def delete_invalid_files(dataset_dir: Path, ids_to_delete):
    """
    Remove images and labels whose IDs are in ids_to_delete.
    dataset_dir: Path to dataset split folder (e.g., Path('/content/dataset/train'))
    ids_to_delete: list of string IDs without extension
    """
    labels_dir = dataset_dir / 'labels'
    images_dir = dataset_dir / 'images'

    for file_id in ids_to_delete:
        json_file = labels_dir / f"{file_id}.json"
        img_file = images_dir / f"{file_id}.png"

        for f in [json_file, img_file]:
            if f.exists():
                f.unlink()
            else:
                print(f"Not found: {f}")

# -------------------------------
# 2. Fix orientation
# -------------------------------
def fix_orientation_and_save(image_path: Path):
    """
    Fix image EXIF orientation in-place.
    """
    try:
        image = Image.open(image_path)
        exif = image._getexif()
        if exif is not None:
            orientation_key = next(
                (key for key, val in ExifTags.TAGS.items() if val == 'Orientation'),
                None
            )
            orientation = exif.get(orientation_key)
            if orientation == 3:
                image = image.rotate(180, expand=True)
            elif orientation == 6:
                image = image.rotate(270, expand=True)
            elif orientation == 8:
                image = image.rotate(90, expand=True)
        image.save(image_path)
    except Exception as e:
        print(f"Could not process {image_path}: {e}")

def fix_dataset_orientation(dataset_dir: Path):
    """
    Fix orientation for all PNG images in a dataset split.
    """
    for img_path in (dataset_dir / 'images').glob("*.png"):
        fix_orientation_and_save(img_path)

# -------------------------------
# 3. Visualize dataset
# -------------------------------
def visualize_dataset(images_dir: Path, labels_dir: Path, max_images=10, draw_expression=True):
    """
    Visualize images with bounding boxes and optional expression text.
    Works for both train and valid datasets.
    """
    image_files = sorted(images_dir.glob('*.png'))
    label_files = {f.stem: f for f in labels_dir.glob('*.json')}

    count = 0
    for img_path in image_files:
        img_id = img_path.stem
        if img_id not in label_files:
            print(f"No label for: {img_path.name}")
            continue

        with open(label_files[img_id], 'r') as f:
            labels = json.load(f)

        anns = labels.get('annotations', [])
        if not anns:
            print(f"No annotations for: {img_path.name}")
            continue

        image = cv2.imread(str(img_path))
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        for ann in anns:
            bbox = ann['boundingBox']
            x, y, w, h = bbox['x'], bbox['y'], bbox['width'], bbox['height']
            cv2.rectangle(image, (int(x), int(y)), (int(x+w), int(y+h)), (0, 255, 0), 2)

        if draw_expression:
            expression = labels.get('expression', '')
            cv2.putText(image, expression, (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
                        1, (255, 0, 0), 2)

        plt.figure(figsize=(6, 6))
        plt.imshow(image)
        plt.title(img_path.name)
        plt.axis('off')
        plt.show()

        count += 1
        if count >= max_images:
            break