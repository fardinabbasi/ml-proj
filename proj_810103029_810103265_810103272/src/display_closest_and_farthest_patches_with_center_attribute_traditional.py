# -*- coding: utf-8 -*-
"""display_closest_and_farthest_patches_with_center_attribute.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FT7nOc71KJS7Y9wNPpGGiYuEMA1rNtp6
"""

import numpy as np
import matplotlib.pyplot as plt

def display_closest_and_farthest_patches_with_center_attribute(
    patches, features, clusters, model, method_name, ft_name, n=5
):

    # Visualize closest and farthest character patches per cluster for methods like KMeans.
    # Use actual cluster centers to compute distances.

    clusters = np.asarray(clusters, dtype=int)
    features = np.asarray(features)

    n_clusters = len(set(clusters)) - (1 if -1 in clusters else 0)

    if not hasattr(model, "cluster_centers_"):
        print(f"{method_name} has no cluster centers. Skipping close/far patch visualization.")
        return

    centers = model.cluster_centers_

    # Check if there are n samples in each cluster
    for cluster_id in range(n_clusters):
        indices = np.where(clusters == cluster_id)[0]
        if len(indices) < n:
            continue

        # Sort samples based on their distances from center
        cluster_features = features[indices]
        dists = np.linalg.norm(cluster_features - centers[cluster_id], axis=1)
        sorted_indices = indices[np.argsort(dists)]

        # Select n closest and farthest
        closest = sorted_indices[:n]
        farthest = sorted_indices[-n:]

        fig, axes = plt.subplots(2, n, figsize=(n * 2, 4))
        fig.suptitle(f"Cluster {cluster_id} - {method_name} - {ft_name}", fontsize=14)

        # Show n closest images to cluster center
        for j, idx in enumerate(closest):
            axes[0, j].imshow(patches[idx], cmap='gray')
            axes[0, j].axis('off')
            axes[0, j].set_title("Close" if j == 0 else "")

        # Show n closest images to cluster center
        for j, idx in enumerate(farthest):
            axes[1, j].imshow(patches[idx], cmap='gray')
            axes[1, j].axis('off')
            axes[1, j].set_title("Far" if j == 0 else "")

        plt.tight_layout()
        plt.show()