# -*- coding: utf-8 -*-
"""load_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oJmz2lENQEDbZYZgcSoVEc35X7hYAgRu
"""

from pathlib import Path
import json
import cv2

def load_dataset(images_dir: Path, labels_dir: Path):
    """
    Load images, bounding boxes, and label metadata for a dataset split.

    Returns:
        images        : list[np.ndarray RGB]
        boxes_all     : list[list[tuple(x,y,w,h)]]
        label_paths   : list[Path]             # path to the JSON for each image (same order)
        expressions   : list[str | None]       # 'expression' string from JSON if present else None
    """
    images = []
    boxes_all = []
    label_paths = []
    expressions = []

    image_files = sorted(images_dir.glob("*.png"))
    label_files = {f.stem: f for f in labels_dir.glob("*.json")}

    for img_path in image_files:
        img_id = img_path.stem
        lbl_path = label_files.get(img_id)
        if lbl_path is None:
            continue

        # image
        image = cv2.imread(str(img_path))
        if image is None:
            continue
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # label json
        with open(lbl_path, "r") as f:
            j = json.load(f)

        boxes = []
        for ann in j.get("annotations", []):
            bb = ann["boundingBox"]
            boxes.append((bb["x"], bb["y"], bb["width"], bb["height"]))

        images.append(image)
        boxes_all.append(boxes)
        label_paths.append(lbl_path)
        expressions.append(j.get("expression"))  # may be None

    return images, boxes_all, label_paths, expressions